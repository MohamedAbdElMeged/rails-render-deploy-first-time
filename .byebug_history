exit
ticket
c
Faker::Alphanumeric.alpha(number: 6) 
Faker::Alphanumeric.alpha(number: 6) * 3
ticket
exit
ticket
c
response.body
response.status
c
request.body
request
response
c
response.body
c
response.body
response
json
c
result.ticket
result.success?
result.succeed?
result
exit
ticket = Ticket.new(
        request_number: params[:RequestNumber],
        sequence_number: params[:SequenceNumber],
        request_type: params[:RequestType],
        request_action: params[:RequestAction],
        response_due_date_time: params&.[](:DateTimes)&.[](:ResponseDueDateTime),
        primary_service_area_code: params&.[](:ServiceArea)&.[](:PrimaryServiceAreaCode)&.[](:SACode),
        additional_service_area_codes: params&.[](:ServiceArea)&.[](:AdditionalServiceAreaCodes)&.[](:SACode),
        well_known_text: GeomFromText(params&.[](:ExcavationInfo)&.[](:DigsiteInfo)&.[](:WellKnownText))
      )
exit
    ticket = Ticket.new(
      request_number: params[:RequestNumber],
      sequence_number: params[:SequenceNumber],
      request_type: params[:RequestType],
      request_action: params[:RequestAction],
      response_due_date_time: params.dig('DateTimes', 'ResponseDueDateTime'),
      primary_service_area_code: params.dig('ServiceArea', 'PrimaryServiceAreaCode', 'SACode'),
      additional_service_area_codes: params.dig('ServiceArea', 'AdditionalServiceAreaCodes', 'SACode'),
      well_known_text: params.dig('ExcavationInfo', 'DigsiteInfo', 'WellKnownText')
    )
params = consumed_params
c
ticket.save!
ticket.valid?
ticket.request_number = x[:RequestNumber]
ticket = Ticket.new
